"""
Add super_admin_activity_logs table

Revision ID: 2a299b032478
Revises: create_activity_logs
Create Date: 2025-07-12 13:44:49.182982

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2a299b032478'
down_revision = 'create_activity_logs'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # Create super_admin_activity_logs table
    op.create_table('super_admin_activity_logs',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('user_id', sa.UUID(), nullable=True),
        sa.Column('action', sa.String(length=50), nullable=False),
        sa.Column('entity_type', sa.String(length=50), nullable=False),
        sa.Column('entity_id', sa.UUID(), nullable=True),
        sa.Column('target_tenant_id', sa.UUID(), nullable=True),
        sa.Column('old_values', sa.JSON(), nullable=True),
        sa.Column('new_values', sa.JSON(), nullable=True),
        sa.Column('ip_address', sa.String(length=50), nullable=True),
        sa.Column('user_agent', sa.Text(), nullable=True),
        sa.Column('details', sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL')
    )
    
    # Create indexes for better query performance
    op.create_index('ix_super_admin_activity_logs_user_id', 'super_admin_activity_logs', ['user_id'])
    op.create_index('ix_super_admin_activity_logs_action', 'super_admin_activity_logs', ['action'])
    op.create_index('ix_super_admin_activity_logs_entity_type', 'super_admin_activity_logs', ['entity_type'])
    op.create_index('ix_super_admin_activity_logs_created_at', 'super_admin_activity_logs', ['created_at'])
    op.create_index('ix_super_admin_activity_logs_target_tenant_id', 'super_admin_activity_logs', ['target_tenant_id'])


def downgrade() -> None:
    # Drop indexes
    op.drop_index('ix_super_admin_activity_logs_target_tenant_id', 'super_admin_activity_logs')
    op.drop_index('ix_super_admin_activity_logs_created_at', 'super_admin_activity_logs')
    op.drop_index('ix_super_admin_activity_logs_entity_type', 'super_admin_activity_logs')
    op.drop_index('ix_super_admin_activity_logs_action', 'super_admin_activity_logs')
    op.drop_index('ix_super_admin_activity_logs_user_id', 'super_admin_activity_logs')
    
    # Drop table
    op.drop_table('super_admin_activity_logs')
    op.drop_index(op.f('ix_activity_logs_action'), table_name='activity_logs')
    op.drop_index(op.f('ix_activity_logs_created_at'), table_name='activity_logs')
    op.drop_index(op.f('ix_activity_logs_entity_type'), table_name='activity_logs')
    op.drop_index(op.f('ix_activity_logs_tenant_id'), table_name='activity_logs')
    op.drop_index(op.f('ix_activity_logs_user_id'), table_name='activity_logs')
    op.drop_table('activity_logs')
    op.drop_index(op.f('ix_tenants_code'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_name'), table_name='tenants')
    op.drop_table('tenants')
    op.drop_index(op.f('ix_tenant_settings_tenant_id'), table_name='tenant_settings')
    op.drop_table('tenant_settings')
    op.alter_column('enrollments', 'grade',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('enrollments', 'withdrawal_reason',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.Text(),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('enrollments', 'withdrawal_reason',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('enrollments', 'grade',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.create_table('tenant_settings',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('theme', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('settings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f('tenant_settings_tenant_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('tenant_settings_pkey'))
    )
    op.create_index(op.f('ix_tenant_settings_tenant_id'), 'tenant_settings', ['tenant_id'], unique=False)
    op.create_table('tenants',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Name of the tenant'),
    sa.Column('code', sa.VARCHAR(length=10), autoincrement=False, nullable=False, comment='Unique uppercase code for the tenant'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Whether the tenant is active'),
    sa.Column('domain', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Domain for the tenant'),
    sa.Column('subdomain', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Subdomain for the tenant'),
    sa.Column('logo', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='Logo URL for the tenant'),
    sa.Column('primary_color', sa.VARCHAR(length=7), autoincrement=False, nullable=True, comment='Primary color for branding (hex)'),
    sa.Column('secondary_color', sa.VARCHAR(length=7), autoincrement=False, nullable=True, comment='Secondary color for branding (hex)'),
    sa.PrimaryKeyConstraint('id', name='tenants_pkey'),
    sa.UniqueConstraint('domain', name='tenants_domain_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_tenants_name'), 'tenants', ['name'], unique=False)
    op.create_index(op.f('ix_tenants_code'), 'tenants', ['code'], unique=True)
    op.create_table('activity_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('old_values', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_values', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f('activity_logs_tenant_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('activity_logs_user_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('activity_logs_pkey'))
    )
    op.create_index(op.f('ix_activity_logs_user_id'), 'activity_logs', ['user_id'], unique=False)
    op.create_index(op.f('ix_activity_logs_tenant_id'), 'activity_logs', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_activity_logs_entity_type'), 'activity_logs', ['entity_type'], unique=False)
    op.create_index(op.f('ix_activity_logs_created_at'), 'activity_logs', ['created_at'], unique=False)
    op.create_index(op.f('ix_activity_logs_action'), 'activity_logs', ['action'], unique=False)
    # ### end Alembic commands ###